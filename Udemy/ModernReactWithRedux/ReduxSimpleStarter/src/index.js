import React from 'react' //node_modules에서 라이브러리를 볼 수 있다.
//코어 리액트 라이브러리는 리액트 컴포넌트 작동(렌더링, 변환 등)에 관여 한다.
import ReactDOM from 'react-dom'
//React DOM 라이브러리는 컴포넌트를 가져와 DOM에 삽입한다.

//리액트를 두 개의 분리된 라이브러리로 나뉘어진다. npm으로 설치된 라이브러리는 패키지의 이름만 작성하면 된다.

import SearchBar from './components/search_bar' //직접 생성한 파일은 상대경로를 넣어 줘야 한다.
//search_bar.js의 SearchBar를 가져온다. export default로 선언된 부분을 가져온다.
//만약 search_bar.js에서 export default foo 등으로 선언했다면
//여기서 똑같이 import SearchBar from './components/earch_bar' 라고 써도 foo의 내용을 가져오게 된다.

const API_KEY = ''
//ES6에서는 더 이상 var를 쓰지 않는다. const나 let을 쓴다.
//터미널에서 npm install --save youtube-api-search 입력해서, youtube-search API를 npm에 추가한다.
//--save라는 명령어는 package.json 파일에 자동으로 저장하라는 의미이다.
//package.json은 프로젝트를 위한 많은 dependency 파일을 포함한다.




//새 컴포넌트 생성. 컴포넌트는 궁극적으로 HTML 코드를 생성한다.
//HTML 코드
const App = () => { //Factory
//const App = function() { 와 같은 표현이다. 화살표 함수는 function 키워드를 사용한 것과 동일하다.
//리액트에선 때로 한 컴포넌트 안에 여러 함수를 작성할 필요가 있는데, 화살표로 표현하면 더 간결하고 압축적으로 정의할 수 있다.

    //const는 ES6, ES2016의 표현이다. 보통 js에서 선언 시 var를 사용했다.
    //하지만 const로 선언하게 되면, 상수가 된다. App은 재할당 되지 않으므로 const로 선언
    return (
        <div>
            <SearchBar />
        </div>
    ) //괄호로 묶어 여러 줄의 JSX 코드로 쓸 수 있다. 괄호로 쓰지 않으면 한 줄로 써줘야 한다.
    //export된 SearchBar 컴포넌트를 불러와 삽입한다.


    //js안에 쓰는 HTML와 비슷한 코드들을 JSX라고 한다. 부분적인 템플릿 혹은 변형된 자바스크립트로
    //자바 스크립트 안에 HTML처럼 보이는 소스 코드를 사용할 수 있게 도와준다.
    //이런식으로 JSX를 사용해야 컴포넌트를 렌더링할 때 실제 HTML로 변환되어 제공되며, DOM에 삽입된다.
    //결국 JSX의 목적은 자바스크립트 코드를 궁극적으로 HTML로 만들기 위한 것이다.
    //JSX는 바닐라 자바스크립트보다 훨씬 직관적이고, 복잡한 컴포넌트(ex. ol, li..)등을 쉽게 표현할 수 있다.

    //웹팩과 바로 코드를 같은 수준의 언어로 변경하여 웹 브라우저로 전송한다.
    //실제로 웹브라우저에서 보여지는 코드는 <div>Hi!</div>;와 완전히 다른 형태이다.
    //여기서 ES6의 const나 JSX의 <div> 등을 웹 브라우저가 이해할 수 없다.
    //따라서 이 표현들을 바닐라 자바스크립트로 변환하여 브라우저가 읽을 수 있도록 해야 한다.
    //http://babeljs.io/repl 에서 ES2016을 선택하 JSX코드를 붙여 넣으면 바닐라 코드를 볼 수 있다.
}

//컴포넌트가 생성된 HTML코드를 가져가 페이지에 반영한다(DOM 형식).
ReactDOM.render(<App />, document.querySelector('.container')) //리액트DOM이 App이라는 컴포넌트를 렌더링한다.
//App은 클래스이므로 인스턴스화 한 이후 렌더링해야 한다.
//JSX에서 클래스를 인스턴스화 하는 명령어는 자체 끝맺음 태그 < />로 생성할 수 있다.

//두 번째 파라미터로 페이지의 위치를 지정해 주는 DOM노드를 설정해 준다(타겟 컨테이너, 타겟 DOM).
//리액트가 컴포넌트를 직접 페이지에 반영하는 것이 아니다. ReactDOM이 렌더링해야 할 곳을 지정해 줘야 한다.
//즉, 첫째 인자 내용으로 HTML 코드로 생성하고, 두 번째 인자 위치에 그 HTML을 삽입한다.
//App의 내용을 HTML로 생성해, .container 위치에 삽입한다.




//리액트는 자바스크립트 라이브러리로, 웹 브라우저에 보여지는 HTML을 만든다.
//리액트로 컴포넌트(Component)혹은 뷰(View)를 각각 만들게 된다.
//컴포넌트는 소스코드 일부이며, 이 코드는 HTML을 생성한다.
//리액트 여러 컴포넌트들을 만들고, 이 컴포넌트들을 여러 방식으로 배치하면서 복잡한 어플리케이션을 간단히 만들어 준다.
//컴포넌트는 HTML을 만드는 자바스크립트 함수의 모음집이다.
//그래서 자바스크립트로 컴포넌트를 만들면, 궁극적으로 HTML로 만들어진다.

//컴포넌트를 만든다고 해서 자동으로 HTML문서에 삽입되지 않는다. 어떤 형식으로 컴포넌트를 넣을 지 정해줘야 한다(DOM).




//리액트 앱은 많은 컴포넌트들의 모음이다. 컴포넌트는 함수나 오브젝트 형태로 HTML을 반환한다.
//각 컴포넌트들은 각자 다른 함수나 목적을 가진다.
//리액트 어플리케이션은 로직과 JSX가 만들어내는 HTML이 하나의 컴포넌트를 생성하기 보다는 여러 개의 컴포넌트 형태를 만든다.
//즉, 다른 컴포넌트들은 서로 다른 목적들을 독립적으로 가지고 있다. 여러개의 컴포넌트를 분리해서 기능적은 부분을 독립시킨다.
//이렇게 컴포넌트를 사용하면, 코드 관리와 재사용이 쉬워진다. 각 파일당 하나의 컴포넌트를 만들어야 한다.
